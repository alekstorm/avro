// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

(function() {
  'use strict';

  function emitEnum(schema) {
    var o = [];
    o.push(
      'function ' + schema.name + '(value) {\n' +
      '  if (' + schema.name + '.symbols.indexOf(value) === -1) {\n' +
      '    throw new TypeError("invalid ' + schema.name + ' value \\"" + value + "\\"");\n' +
      '  }\n' +
      '  return value;\n' +
      '}\n' +
      schema.name + '.symbols = ' + JSON.stringify(schema.symbols) + ';'
    );
    schema.symbols.forEach(function(symbol) {
      o.push(schema.name + '.' + symbol + ' = "' + symbol + '";');
    });
    return o.join('\n');
  }

  // * Returns a record emitter for the given `recordSchema`, which must be
  // * pre-analyzed by `analyzeRecord`.
  var record = {
    emitDocComment: function(schema) {
      return '/**\n * ' + schema.name + ' (AUTOGENERATED)\n */';
    },
    emitConstructor: function(schema) {
      return 'function ' + schema.name + '(data) {\n' +
        '  this.data = data;\n' +
        '}';
    },
    emit: function(schema) {
      return [
        record.emitDocComment(schema),
        record.emitConstructor(schema)
      ].join('\n');
    }
  };

  function emitFixed(schema) {
    // TODO
  }

  var emitFnTable = {
    record: record.emit,
    'enum': emitEnum,
    fixed: emitFixed
  };

  function emit(schema) {
    return emitFnTable[schema.type](schema);
  }

  if (typeof exports !== 'undefined') {
    exports.emitEnum = emitEnum;
    exports.record = record;
    exports.emit = emit;
    // TODO: emitFixed
  }
}).call(this);
