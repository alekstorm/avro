This folder currently contains a primitive compiler for Avro schemas into Scala classes.
This should eventually compile protocols too.

This is work in progress, APIs are still moving.

Avro records are compiled into two forms: immutable and mutable.
The record definition:
    @namespace("a.b.c")
    record Record { ... }
will be compiled into two classes:
    a.b.c.scala.Record
    a.b.c.scala.MutableRecord

Records are constructed as follow:
    val record = new a.b.c.scala.Record(field_name = field_value, ...)

Both forms can be encoded through: record.encode(encoder).
Only mutable records can be decoded with: record.decode(decoder).

The mapping from Avro types to Scala types is defined in:
    org.apache.avro.scala.TypeMap

Unions are compiled into custom case classes in the general case:
    union { T1, T2, T3 } field_name;
is compiled into:
    abstract class FieldNameUnionType
    case class FieldNameT1(data: T1)
    case class FieldNameT2(data: T2)
    case class FieldNameT3(data: T3)

However, simple optional unions: union { null, T } optional_field;
are compiled into the standard Scala option: Option[T]
